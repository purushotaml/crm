<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="12" tokens="74">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpspec\prophecy\spec\Prophecy\Doubler\Generator\ClassMirrorSpec.php" line="269"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpspec\prophecy\spec\Prophecy\Doubler\Generator\ClassMirrorSpec.php" line="323"/>
    <codefragment>        $class-&gt;getName()-&gt;willReturn('Custom\ClassName');&#13;
        $class-&gt;isInterface()-&gt;willReturn(false);&#13;
        $class-&gt;isFinal()-&gt;willReturn(false);&#13;
        $class-&gt;getMethods(ReflectionMethod::IS_ABSTRACT)-&gt;willReturn(array());&#13;
        $class-&gt;getMethods(ReflectionMethod::IS_PUBLIC)-&gt;willReturn(array($method));&#13;
&#13;
        $method-&gt;getName()-&gt;willReturn('methodWithArgs');&#13;
        $method-&gt;isFinal()-&gt;willReturn(false);&#13;
        $method-&gt;isProtected()-&gt;willReturn(false);&#13;
        $method-&gt;isStatic()-&gt;willReturn(false);&#13;
        $method-&gt;returnsReference()-&gt;willReturn(false);&#13;
        $method-&gt;getParameters()-&gt;willReturn(array($param1));&#13;
</codefragment>
  </duplication>
  <duplication lines="29" tokens="125">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpspec\prophecy\spec\Prophecy\Doubler\Generator\ClassMirrorSpec.php" line="34"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpspec\prophecy\spec\Prophecy\Doubler\Generator\ClassMirrorSpec.php" line="503"/>
    <codefragment>        $method3-&gt;getName()-&gt;willReturn('isAbstract');&#13;
&#13;
        $method1-&gt;isFinal()-&gt;willReturn(false);&#13;
        $method2-&gt;isFinal()-&gt;willReturn(false);&#13;
        $method3-&gt;isFinal()-&gt;willReturn(false);&#13;
&#13;
        $method1-&gt;isProtected()-&gt;willReturn(false);&#13;
        $method2-&gt;isProtected()-&gt;willReturn(false);&#13;
        $method3-&gt;isProtected()-&gt;willReturn(false);&#13;
&#13;
        $method1-&gt;isStatic()-&gt;willReturn(false);&#13;
        $method2-&gt;isStatic()-&gt;willReturn(false);&#13;
        $method3-&gt;isStatic()-&gt;willReturn(false);&#13;
&#13;
        $method1-&gt;returnsReference()-&gt;willReturn(false);&#13;
        $method2-&gt;returnsReference()-&gt;willReturn(false);&#13;
        $method3-&gt;returnsReference()-&gt;willReturn(false);&#13;
&#13;
        $method1-&gt;getParameters()-&gt;willReturn(array());&#13;
        $method2-&gt;getParameters()-&gt;willReturn(array());&#13;
        $method3-&gt;getParameters()-&gt;willReturn(array());&#13;
&#13;
        if (version_compare(PHP_VERSION, '7.0', '&gt;=')) {&#13;
            $method1-&gt;hasReturnType()-&gt;willReturn(false);&#13;
            $method2-&gt;hasReturnType()-&gt;willReturn(false);&#13;
            $method3-&gt;hasReturnType()-&gt;willReturn(false);&#13;
        }&#13;
&#13;
        $classNode   = $this-&gt;reflect($class, array());&#13;
</codefragment>
  </duplication>
  <duplication lines="53" tokens="76">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpunit\phpunit\tests\_files\BankAccountTest.php" line="16"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpunit\phpunit\tests\_files\BankAccountTest.test.php" line="16"/>
    <codefragment>class BankAccountTest extends PHPUnit_Framework_TestCase&#13;
{&#13;
    protected $ba;&#13;
&#13;
    protected function setUp()&#13;
    {&#13;
        $this-&gt;ba = new BankAccount;&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers BankAccount::getBalance&#13;
     * @group balanceIsInitiallyZero&#13;
     * @group specification&#13;
     */&#13;
    public function testBalanceIsInitiallyZero()&#13;
    {&#13;
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers BankAccount::withdrawMoney&#13;
     * @group balanceCannotBecomeNegative&#13;
     * @group specification&#13;
     */&#13;
    public function testBalanceCannotBecomeNegative()&#13;
    {&#13;
        try {&#13;
            $this-&gt;ba-&gt;withdrawMoney(1);&#13;
        } catch (BankAccountException $e) {&#13;
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        $this-&gt;fail();&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers BankAccount::depositMoney&#13;
     * @group balanceCannotBecomeNegative&#13;
     * @group specification&#13;
     */&#13;
    public function testBalanceCannotBecomeNegative2()&#13;
    {&#13;
        try {&#13;
            $this-&gt;ba-&gt;depositMoney(-1);&#13;
        } catch (BankAccountException $e) {&#13;
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        $this-&gt;fail();&#13;
</codefragment>
  </duplication>
  <duplication lines="43" tokens="125">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpunit\phpunit\tests\Framework\AssertTest.php" line="894"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\comparator\tests\DateTimeComparatorTest.php" line="44"/>
    <codefragment>            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 04:13:25', new DateTimeZone('America/New_York')),&#13;
    10&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 04:14:40', new DateTimeZone('America/New_York')),&#13;
    65&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/Chicago')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 03:13:49', new DateTimeZone('America/Chicago')),&#13;
    15&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 23:00:00', new DateTimeZone('America/Chicago')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 23:01:30', new DateTimeZone('America/Chicago')),&#13;
    100&#13;
            ),&#13;
            array(&#13;
                new DateTime('@1364616000'),&#13;
                new DateTime('2013-03-29 23:00:00', new DateTimeZone('America/Chicago')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29T05:13:35-0500'),&#13;
                new DateTime('2013-03-29T04:13:35-0600'),&#13;
</codefragment>
  </duplication>
  <duplication lines="43" tokens="122">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpunit\phpunit\tests\Framework\AssertTest.php" line="778"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\comparator\tests\DateTimeComparatorTest.php" line="94"/>
    <codefragment>            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/New_York')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/New_York')),&#13;
    3500&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 05:13:35', new DateTimeZone('America/New_York')),&#13;
    3500&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),&#13;
    43200&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/Chicago')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/Chicago')),&#13;
    3500&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),&#13;
                new DateTime('2013-03-30', new DateTimeZone('America/Chicago')),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29T05:13:35-0600'),&#13;
                new DateTime('2013-03-29T04:13:35-0600'),&#13;
            ),&#13;
            array(&#13;
                new DateTime('2013-03-29T05:13:35-0600'),&#13;
                new DateTime('2013-03-29T05:13:35-0500'),&#13;
</codefragment>
  </duplication>
  <duplication lines="46" tokens="76">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\comparator\tests\DoubleComparatorTest.php" line="87"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\comparator\tests\NumericComparatorTest.php" line="75"/>
    <codefragment>    public function testAcceptsSucceeds($expected, $actual)&#13;
    {&#13;
        $this-&gt;assertTrue(&#13;
          $this-&gt;comparator-&gt;accepts($expected, $actual)&#13;
        );&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::accepts&#13;
     * @dataProvider acceptsFailsProvider&#13;
     */&#13;
    public function testAcceptsFails($expected, $actual)&#13;
    {&#13;
        $this-&gt;assertFalse(&#13;
          $this-&gt;comparator-&gt;accepts($expected, $actual)&#13;
        );&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::assertEquals&#13;
     * @dataProvider assertEqualsSucceedsProvider&#13;
     */&#13;
    public function testAssertEqualsSucceeds($expected, $actual, $delta = 0.0)&#13;
    {&#13;
        $exception = null;&#13;
&#13;
        try {&#13;
            $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);&#13;
        }&#13;
&#13;
        catch (ComparisonFailure $exception) {&#13;
        }&#13;
&#13;
        $this-&gt;assertNull($exception, 'Unexpected ComparisonFailure');&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::assertEquals&#13;
     * @dataProvider assertEqualsFailsProvider&#13;
     */&#13;
    public function testAssertEqualsFails($expected, $actual, $delta = 0.0)&#13;
    {&#13;
        $this-&gt;setExpectedException(&#13;
          'SebastianBergmann\\Comparator\\ComparisonFailure', 'matches expected'&#13;
        );&#13;
        $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);&#13;
</codefragment>
  </duplication>
  <duplication lines="54" tokens="80">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\comparator\tests\MockObjectComparatorTest.php" line="108"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\comparator\tests\ObjectComparatorTest.php" line="95"/>
    <codefragment>            $this-&gt;getMock('SebastianBergmann\\Comparator\\Struct', null, array(4.2)),&#13;
            $equalMessage,&#13;
            0.5&#13;
          )&#13;
        );&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::accepts&#13;
     * @dataProvider acceptsSucceedsProvider&#13;
     */&#13;
    public function testAcceptsSucceeds($expected, $actual)&#13;
    {&#13;
        $this-&gt;assertTrue(&#13;
          $this-&gt;comparator-&gt;accepts($expected, $actual)&#13;
        );&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::accepts&#13;
     * @dataProvider acceptsFailsProvider&#13;
     */&#13;
    public function testAcceptsFails($expected, $actual)&#13;
    {&#13;
        $this-&gt;assertFalse(&#13;
          $this-&gt;comparator-&gt;accepts($expected, $actual)&#13;
        );&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::assertEquals&#13;
     * @dataProvider assertEqualsSucceedsProvider&#13;
     */&#13;
    public function testAssertEqualsSucceeds($expected, $actual, $delta = 0.0)&#13;
    {&#13;
        $exception = null;&#13;
&#13;
        try {&#13;
            $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);&#13;
        }&#13;
&#13;
        catch (ComparisonFailure $exception) {&#13;
        }&#13;
&#13;
        $this-&gt;assertNull($exception, 'Unexpected ComparisonFailure');&#13;
    }&#13;
&#13;
    /**&#13;
     * @covers       ::assertEquals&#13;
     * @dataProvider assertEqualsFailsProvider&#13;
     */&#13;
    public function testAssertEqualsFails($expected, $actual, $message, $delta = 0.0)&#13;
    {&#13;
        $this-&gt;setExpectedException(&#13;
</codefragment>
  </duplication>
  <duplication lines="25" tokens="79">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\phpunit\phpunit\tests\_files\DataProviderDebugTest.php" line="14"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\sebastian\exporter\tests\ExporterTest.php" line="30"/>
    <codefragment>        $obj2      = new \stdClass();&#13;
        $obj2-&gt;foo = 'bar';&#13;
&#13;
        $obj3 = (object) array(1,2,"Test\r\n",4,5,6,7,8);&#13;
&#13;
        $obj = new \stdClass();&#13;
        //@codingStandardsIgnoreStart&#13;
        $obj-&gt;null = null;&#13;
        //@codingStandardsIgnoreEnd&#13;
        $obj-&gt;boolean     = true;&#13;
        $obj-&gt;integer     = 1;&#13;
        $obj-&gt;double      = 1.2;&#13;
        $obj-&gt;string      = '1';&#13;
        $obj-&gt;text        = "this\nis\na\nvery\nvery\nvery\nvery\nvery\nvery\rlong\n\rtext";&#13;
        $obj-&gt;object      = $obj2;&#13;
        $obj-&gt;objectagain = $obj2;&#13;
        $obj-&gt;array       = array('foo' =&gt; 'bar');&#13;
        $obj-&gt;self        = $obj;&#13;
&#13;
        $storage = new \SplObjectStorage();&#13;
        $storage-&gt;attach($obj2);&#13;
        $storage-&gt;foo = $obj2;&#13;
&#13;
        return array(&#13;
            array(null, true, 1, 1.0),&#13;
</codefragment>
  </duplication>
  <duplication lines="17" tokens="74">
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\symfony\yaml\Symfony\Component\Yaml\Tests\InlineTest.php" line="209"/>
    <file path="C:\Program Files (x86)\Jenkins\jobs\phpunit\workspace\src\vendor\symfony\yaml\Symfony\Component\Yaml\Tests\InlineTest.php" line="276"/>
    <codefragment>            array('2007-10-30', mktime(0, 0, 0, 10, 30, 2007)),&#13;
            array('2007-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 2007)),&#13;
            array('2007-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 2007)),&#13;
            array('1960-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 1960)),&#13;
            array('1730-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 1730)),&#13;
&#13;
            array('"a \\"string\\" with \'quoted strings inside\'"', 'a "string" with \'quoted strings inside\''),&#13;
            array("'a \"string\" with ''quoted strings inside'''", 'a "string" with \'quoted strings inside\''),&#13;
&#13;
            // sequences&#13;
            // urls are no key value mapping. see #3609. Valid yaml "key: value" mappings require a space after the colon&#13;
            array('[foo, http://urls.are/no/mappings, false, null, 12]', array('foo', 'http://urls.are/no/mappings', false, null, 12)),&#13;
            array('[  foo  ,   bar , false  ,  null     ,  12  ]', array('foo', 'bar', false, null, 12)),&#13;
            array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),&#13;
&#13;
            // mappings&#13;
            array('{foo:bar,bar:foo,false:false,null:null,integer:12}', array('foo' =&gt; 'bar', 'bar' =&gt; 'foo', 'false' =&gt; false, 'null' =&gt; null, 'integer' =&gt; 12)),&#13;
</codefragment>
  </duplication>
</pmd-cpd>
